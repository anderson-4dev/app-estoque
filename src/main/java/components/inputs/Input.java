package components.inputs;

import Helpers.MaxCaracters;
import java.awt.Color;
import javax.swing.JTextField;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author ander
 */
public class Input extends javax.swing.JPanel {
    
    protected boolean enabled = false;
    //define a quantidade de caracteres na input
    protected int maxLenght = 0;
    
    protected final Color DEFAULT_BACKGROUND = new java.awt.Color(255, 255, 255);
    protected final Color READONLY_BACKGROUND = new java.awt.Color(204,204,204);

    /**
     * Creates new form Input
     */
    public Input() {
        initComponents();
        
        this.readOnly(false);
        
//        this.addFocusListener(new java.awt.event.FocusAdapter() {
//            public void focusGained(java.awt.event.FocusEvent evt) {
//                inputText.requestFocus();
//                System.out.println("componente ganhou focus");
//                //inputText.selectAll();
//            }
//        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        inputText = new javax.swing.JFormattedTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        inputLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        inputLabel.setForeground(new java.awt.Color(42, 77, 104));
        inputLabel.setText("inputLabel");

        inputText.setBackground(new java.awt.Color(255, 255, 255));
        inputText.setForeground(new java.awt.Color(42, 77, 104));
        inputText.setText("inputText");
        inputText.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        inputText.setPreferredSize(new java.awt.Dimension(77, 30));
        inputText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputTextFocusGained(evt);
            }
        });
        inputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextActionPerformed(evt);
            }
        });
        inputText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputTextKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inputText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inputLabel)
                .addGap(2, 2, 2)
                .addComponent(inputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inputTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputTextFocusGained
        if(this.inputText.isEnabled()){
            this.inputText.selectAll();
        }
    }//GEN-LAST:event_inputTextFocusGained

    private void inputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextActionPerformed
        this.transferFocus();
    }//GEN-LAST:event_inputTextActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        this.inputText.requestFocus();
    }//GEN-LAST:event_formFocusGained

    private void inputTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextKeyPressed
        if(Helpers.TeclasAtalho.TECLA_ENTER(evt)){
            this.transferFocus();
        }
    }//GEN-LAST:event_inputTextKeyPressed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JLabel inputLabel;
    protected javax.swing.JFormattedTextField inputText;
    // End of variables declaration//GEN-END:variables
    
    
    //valor padrão da input text
    protected String inputDefaultText = "";
    
    /*PERSONAL CODE*/
    public void setFormatterFactory(javax.swing.text.DefaultFormatterFactory defaultFormatterFactory){
        inputText.setFormatterFactory(defaultFormatterFactory);
    }
    
    public void setMask(String string) {
        try {
            
            MaskFormatter formater = new MaskFormatter();
            formater.setMask(string);
            //formater.install(inputText);
            setFormatterFactory(new DefaultFormatterFactory(formater));
            inputText.setText("");
            inputText.setValue(null);
            //inputText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
    }
    
    public String getInputLabel() {
        return inputLabel.getText();
    }

    public void setInputLabel(String inputLabel) {
        this.inputLabel.setText(inputLabel);
    }

    public String getInputText() {
        return inputText.getText();
    }
    
    public JTextField getInput(){
        return inputText;
    }

    public void setInputText(String inputText) {
        this.inputText.setText(inputText);
    }
    
    public String getInputDefaultText() {
        return inputDefaultText;
    }

    public void setInputDefaultText(String inputDefaultText) {
        this.inputDefaultText = inputDefaultText;
    }

    public int getMaxLenght() {
        return maxLenght;
    }

    public void setMaxLenght(int maxLenght) {
        this.maxLenght = maxLenght;
        if(this.maxLenght > 0){
            this.inputText.setDocument(new MaxCaracters(maxLenght));
        }
    }
    

    /**
    * Torna a input editavel ou não
     * @param readOnly
    */
    public void readOnly(boolean readOnly){
        this.inputText.setEditable(!readOnly);
        this.inputText.setFocusable(!readOnly);
        
        if(!readOnly){
            this.inputText.setBackground(DEFAULT_BACKGROUND);
        }else{
            this.inputText.setBackground(READONLY_BACKGROUND);
        }
    }
    
    /**
     * Prepara o input para receber novos dados
     * @param enabled
     */
    public void enableDataInput(boolean enabled){
        this.readOnly(!enabled);
        this.setInputText(this.inputDefaultText);
    }

    public void focus() {
        this.requestFocus();
    }
}
