package components.selecter;

import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;

/**
 *
 * @author ander
 */
public class InputSelectButton extends javax.swing.JPanel {

    /**
     * Creates new form inputSelect
     */
    public InputSelectButton() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        jComboBox = new javax.swing.JComboBox<>();
        btn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(42, 77, 104));

        inputLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        inputLabel.setForeground(new java.awt.Color(42, 77, 104));
        inputLabel.setText("inputLabel");

        jComboBox.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jComboBox.setForeground(new java.awt.Color(42, 77, 104));
        jComboBox.setPreferredSize(new java.awt.Dimension(65, 30));
        jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxActionPerformed(evt);
            }
        });

        btn.setBackground(new java.awt.Color(255, 255, 255));
        btn.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        btn.setForeground(new java.awt.Color(42, 77, 104));
        btn.setText("+");
        btn.setToolTipText("Clique para adicionar ou editar um item");
        btn.setContentAreaFilled(false);
        btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn.setMargin(new java.awt.Insets(2, 2, 2, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(btn))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inputLabel)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JComboBox<Object> jComboBox;
    // End of variables declaration//GEN-END:variables
   
    
    public JButton getButton() {
        return btn;
    }

    public void setButtonAdd(JButton btn) {
        this.btn = btn;
    }
    
    public String getInputLabel() {
        return inputLabel.getText();
    }

    public void setInputLabel(String inputLabel) {
        this.inputLabel.setText(inputLabel);
    }
    
    /**
    * Torna a input editavel ou não
     * @param readOnly
    */
    public void readOnly(boolean readOnly){
        jComboBox.setEnabled(!readOnly);
    }
    
    /**
     * Prepara o input para receber novos dados
     * @param enabled
     */
    public void enableDataInput(boolean enabled){
        this.readOnly(!enabled);
        //this.setInputText("");
    }
    
    //***************************
    public Object getSelectedItem() {
        return jComboBox.getSelectedItem();
    }

    public void setSelectedIndex(int index) {
        jComboBox.setSelectedIndex(index);
    }
    
    public int getSelectedIndex() {
        return jComboBox.getSelectedIndex();
    }
    
    public void setSelectedItem(Object item){
        if(item != null){
            for(int i = 0; i < jComboBox.getItemCount(); i++){
                if(jComboBox.getItemAt(i).toString().equals(item.toString())){
                    setSelectedIndex(i);
                    break;
                }
            }
        }
    }
    
    public void addItem(Object item) {
        jComboBox.addItem(item);
    }

    public void removeAllItems() {
        jComboBox.removeAllItems();
    }
    
    
    /**CRIAR LOGICA PARA USAR COM BUTTON E NÃO COM LABEL*/
//    public JButton getButton() {
//        return this.buttonAdd;
//    }
//
//    public void setButtonEnabled(boolean b) {
//        this.button.setEnabled(b);
//    }

    public JComboBox getInput() {
        return jComboBox;
    }

    public void loadOptions(List<Object> itens) {

        int index = jComboBox.getSelectedIndex();
        
        this.jComboBox.removeAllItems();

        this.carregar(itens);
        
        int linha = (index > -1) ? index : 0;
        
        /**
         * Seleciona o index
         */
        jComboBox.setSelectedIndex((index > -1) ? index : 0);
    }
    
    public void loadOptions(List<Object> itens, Object firstOption) {

        int index = jComboBox.getSelectedIndex();
        
        this.jComboBox.removeAllItems();
        
        this.jComboBox.addItem(firstOption);

        this.carregar(itens);
        
        int linha = (index > -1) ? index : 0;
        
        /**
         * Seleciona o index
         */
        jComboBox.setSelectedIndex((index > -1) ? index : 0);
    }
    
    private void carregar(List<Object> itens){
        
        itens.forEach(item -> {
            jComboBox.addItem(item);
        });
        
    }

    
    
}
